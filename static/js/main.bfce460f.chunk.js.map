{"version":3,"sources":["img/Pokeball-1.png","img/pokemon-title-1.gif","img/poke-dex.png","components/Header.js","components/PokeCard.js","components/PokeDex.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","alt","src","pokeBall","pokeTitle","pokeDex","PokeCard","imgSrc","this","pokemonId","pokemonName","pokemonType","pokemonBaseExp","Component","PokeDex","pokemon","map","index","key","id","name","type","base_experience","App","state","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,wC,kBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,sC,iTCkB5BC,EAVA,SAAAC,GAAK,OAChB,gCACI,yBAAKC,UAAU,eAAeC,IAAI,WAAWC,IAAKC,MAClD,yBAAKH,UAAU,cACX,yBAAKA,UAAU,gBAAgBC,IAAI,YAAYC,IAAKE,MACpD,yBAAKJ,UAAU,cAAcC,IAAI,UAAUC,IAAKG,OAEpD,yBAAKL,UAAU,2BAA2BC,IAAI,WAAWC,IAAKC,QCMvDG,G,6LAZP,IAAIC,EANU,iDAMaC,KAAKT,MAAMU,UAAa,OACnD,OACI,yBAAKT,UAAU,YACX,4BAAKQ,KAAKT,MAAMW,aAChB,yBAAKR,IAAKK,EAAQN,IAAKO,KAAKT,MAAMW,cAClC,qCAAWF,KAAKT,MAAMY,aACtB,oCAAUH,KAAKT,MAAMa,qB,GATdC,cCqBRC,EArBC,SAAAf,GAAK,OACjB,yBAAKC,UAAU,WACX,uCACA,yBAAKA,UAAU,gBACTD,EAAMgB,QAAQC,KAAI,SAACD,EAASE,GAAV,OAChB,kBAAC,EAAD,CACIC,IAAKD,EACLR,UAAWM,EAAQI,GACnBT,YAAaK,EAAQK,KACrBT,YAAaI,EAAQM,KACrBT,eAAgBG,EAAQO,wBCkC7BC,E,2MA/BbC,MAAQ,CACNT,QAAS,CACP,CAACI,GAAI,EAAGC,KAAM,YAAaC,KAAM,QAASC,gBAAiB,IAC3D,CAACH,GAAI,EAAGC,KAAM,aAAcC,KAAM,OAAQC,gBAAiB,IAC3D,CAACH,GAAI,EAAGC,KAAM,WAAYC,KAAM,QAASC,gBAAiB,IAC1D,CAACH,GAAI,GAAIC,KAAM,UAAWC,KAAM,MAAOC,gBAAiB,IACxD,CAACH,GAAI,GAAIC,KAAM,aAAcC,KAAM,SAAUC,gBAAiB,KAC9D,CAACH,GAAI,GAAIC,KAAM,UAAWC,KAAM,WAAYC,gBAAiB,KAC7D,CAACH,GAAI,GAAIC,KAAM,aAAcC,KAAM,SAAUC,gBAAiB,IAC9D,CAACH,GAAI,GAAIC,KAAM,SAAUC,KAAM,SAAUC,gBAAiB,KAC1D,CAACH,GAAI,IAAKC,KAAM,aAAcC,KAAM,UAAWC,gBAAiB,KAChE,CAACH,GAAI,IAAKC,KAAM,QAASC,KAAM,SAAUC,gBAAiB,IAC1D,CAACH,GAAI,IAAKC,KAAM,aAAcC,KAAM,SAAUC,gBAAiB,KAC/D,CAACH,GAAI,IAAKC,KAAM,UAAWC,KAAM,SAAUC,gBAAiB,O,wEAO9D,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEe,QAASP,KAAKgB,MAAMT,e,GArCZF,aCMEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bfce460f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Pokeball-1.f7b41b0b.png\";","module.exports = __webpack_public_path__ + \"static/media/pokemon-title-1.1d7e836a.gif\";","module.exports = __webpack_public_path__ + \"static/media/poke-dex.ee3b2468.png\";","import React from 'react';\n\nimport '../css/Header.css';\nimport pokeBall from '../img/Pokeball-1.png';\nimport pokeTitle from '../img/pokemon-title-1.gif';\nimport pokeDex from '../img/poke-dex.png';\n// import PropType from 'prop-types'\n\nconst Header = props =>\n    <header>\n        <img className='pokeBall-img' alt='pokeball' src={pokeBall} />\n        <div className='poke-title'>\n            <img className='pokeTitle-img' alt='poketitle' src={pokeTitle} />\n            <img className='pokeDex-img' alt='pokedex' src={pokeDex} />\n        </div>\n        <img className='pokeBall-img second-ball' alt='pokeball' src={pokeBall} />\n    </header>;\n\nexport default Header","import React, { Component} from 'react';\n\nimport '../css/PokeCard.css';\nconst pokemonImgAPI = 'https://pokeres.bastionbot.org/images/pokemon/';\n\nlet pokemonImgSRC = (id) => (pokemonImgAPI + id) \nclass PokeCard extends Component{\n\n    render(){\n        let imgSrc = pokemonImgSRC(this.props.pokemonId) + '.png';\n        return(\n            <div className=\"pokecard\">\n                <h2>{this.props.pokemonName}</h2>\n                <img src={imgSrc} alt={this.props.pokemonName}/>\n                <h3>Type: {this.props.pokemonType}</h3>\n                <h3>Exp: {this.props.pokemonBaseExp}</h3>\n            </div>\n        )\n    }\n}\n\nexport default PokeCard","import React from 'react';\n// import PropTypes from 'prop-types';\n\nimport '../css/PokeDex.css';\nimport PokeCard from '../components/PokeCard'\n\nconst PokeDex = props =>\n    <div className=\"PokeDex\">\n        <h1>PokeDex</h1>\n        <div className=\"card-display\">\n            { props.pokemon.map((pokemon, index) =>\n                <PokeCard \n                    key={index}\n                    pokemonId={pokemon.id}\n                    pokemonName={pokemon.name}\n                    pokemonType={pokemon.type}\n                    pokemonBaseExp={pokemon.base_experience}\n\n                />\n            )}\n        </div>\n    </div>;\n\n    PokeDex.propTypes = {\n        \n    }\n\nexport default PokeDex","import React, { Component } from 'react';\n\nimport '../css/App.css';\nimport Header from '../components/Header';\nimport PokeDex from '../components/PokeDex';\n\nclass App extends Component {\n\n  // fetchPokemon = () =>\n  //   fetch('https://pokeapi.co/api/v2/pokemon?limit=151')\n  //   .then(respone => respone.json())\n  //   .then(pokemon => this.setState({ pokemon })\n  // );\n\n  // componentDidMount(){\n  //   this.fetchPokemon();\n  // }\n\n  \n  state = {\n    pokemon: [\n      {id: 1, name: 'Bulbasaur', type: 'water', base_experience: 64},\n      {id: 4, name: 'Charmander', type: 'fire', base_experience: 62},\n      {id: 7, name: 'Squirtle', type: 'water', base_experience: 63},\n      {id: 11, name: 'Metapod', type: 'bug', base_experience: 72},\n      {id: 12, name: 'Butterfree', type: 'flying', base_experience: 178},\n      {id: 25, name: 'Pikachu', type: 'electric', base_experience: 112},\n      {id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95},\n      {id: 94, name: 'Gengar', type: 'poison', base_experience: 225},\n      {id: 125, name: 'Electabuzz', type: 'eletric', base_experience: 172},\n      {id: 133, name: 'Eevee', type: 'normal', base_experience: 65},\n      {id: 160, name: 'feraligatr', type: 'normal', base_experience: 265},\n      {id: 252, name: 'treecko', type: 'unkown', base_experience: 275}\n\n    ]\n  }; \n\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Header />\n        <PokeDex \n          pokemon={this.state.pokemon}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}